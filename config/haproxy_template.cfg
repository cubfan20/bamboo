global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin
        stats timeout 30s
        user haproxy
        group haproxy
        daemon
        
        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL).
        # ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000

        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http


# Template Customization
frontend http-in
        bind *:80
        capture request  header Host len 60
        {{ $services := .Services }}
        {{ range $index, $app := .Apps }} {{ if hasKey $services $app.Id }} {{ $service := getService $services $app.Id }}
        acl {{ $app.EscapedId }}-aclrule {{ $service.Acl}}
        use_backend {{ $app.EscapedId }}-cluster if {{ $app.EscapedId }}-aclrule
		{{ else if $app.Env.CUSTOM }}
		{{ $shouldBeProcessed := false }}
		{{ if or $app.Env.LB_NAME .Env.LB_NAME }}
			{{ if and $app.Env.LB_NAME .Env.LB_NAME }}
				{{ if eq $app.Env.LB_NAME .Env.LB_NAME }}
					{{ $shouldBeProcessed := true }}
				{{ end }}
			{{ end }}
		{{ else }}
			{{ $shouldBeProcessed := true }}
		{{ end }}
		{{ if $shouldBeProcessed }}
		{{ range $portIndex, $servicePort := .ServicePorts }}
        {{ if eq (index $app.Env (print "TYPE_PORT_" $portIndex)) "http" }}
        {{ $domain := index $app.Env (print "DOMAIN_PORT_" $portIndex) }}
        acl {{ $app.EscapedId }}-aclrule-{{ $portIndex }} hdr_beg(host) -i {{ $domain }}
        use_backend {{ $app.EscapedId }}-cluster-{{ $portIndex }} if {{ $app.EscapedId }}-aclrule-{{ $portIndex }}			
        {{ end }}{{ end }}{{ end }}
        {{ end }} {{ end }}

        stats enable
        # CHANGE: Your stats credentials
        stats auth admin:admin
        stats uri /haproxy_stats
        
frontend ssl-in
        bind *:443
        mode tcp
        
        tcp-request inspect-delay 5s
  		tcp-request content accept if { req_ssl_hello_type 1 }
        
        {{ $services := .Services }}
        {{ range $index, $app := .Apps }}
		{{ if $app.Env.CUSTOM }}
		{{ range $portIndex, $servicePort := .ServicePorts }}
        {{ if eq (index $app.Env (print "TYPE_PORT_" $portIndex)) "ssl" }}
        {{ $domain := index $app.Env (print "DOMAIN_PORT_" $portIndex) }}
        acl {{ $app.EscapedId }}-aclrule-{{ $portIndex }} req_ssl_sni -i {{ $domain }}
        use_backend {{ $app.EscapedId }}-cluster-{{ $portIndex }} if {{ $app.EscapedId }}-aclrule-{{ $portIndex }}			
        {{ end }}{{ end }}
		{{ end }}{{ end }}

{{ range $index, $app := .Apps }} {{ if $app.Env.BAMBOO_TCP_PORT }}
listen {{ $app.EscapedId }}-cluster-tcp :{{ $app.Env.BAMBOO_TCP_PORT }}
        mode tcp
        option tcplog
        balance roundrobin
        {{ range $page, $task := .Tasks }}
        server {{ $app.EscapedId}}-{{ $task.Host }}-{{ $task.Port }} {{ $task.Host }}:{{ $task.Port }} check {{ end }}
{{ else }}
{{ range $portIndex, $servicePort := .ServicePorts }}
{{ if eq (index $app.Env (print "TYPE_PORT_" $portIndex)) "tcp" }}
{{ $tcpPort := index $app.Env (print "TCP_PORT_" $portIndex) }}
listen {{ $app.EscapedId }}-cluster-tcp-{{ $portIndex }} :{{ $tcpPort }}
        mode tcp
        option tcplog
        balance roundrobin
        {{ range $page, $task := $app.Tasks }}
        server {{ $app.EscapedId}}-{{ $task.Host }}-{{ index .Ports $portIndex }} {{ $task.Host }}:{{ index .Ports $portIndex }} check {{ end }}
{{ else if eq (index $app.Env (print "TYPE_PORT_" $portIndex)) "ssl" }} 
{{ $keepAlive := index $app.Env (print "KEEP_ALIVE_PORT_" $portIndex) }}
{{ $serverTimeout := index $app.Env (print "SERVER_TIMEOUT_" $portIndex) }}
backend {{ $app.EscapedId }}-cluster-{{ $portIndex }}
        mode tcp
        option tcplog  		
  		{{ if $keepAlive }}balance source{{ else }}balance leastconn{{ end }}
  		{{ if $serverTimeout }}timeout server {{ $serverTimeout }}{{ end }}
  		{{ range $page, $task := $app.Tasks }}
        server {{ $app.EscapedId}}-{{ $task.Host }}-{{ index .Ports $portIndex }} {{ $task.Host }}:{{ index .Ports $portIndex }} check {{ end }}
{{ else if eq (index $app.Env (print "TYPE_PORT_" $portIndex)) "http-custom-port" }}
{{ $httpPort := index $app.Env (print "HTTP_PORT_" $portIndex) }}
{{ $healthCheckPath := $app.HealthCheckPath }}
{{ $keepAlive := index $app.Env (print "KEEP_ALIVE_PORT_" $portIndex) }}
{{ $serverTimeout := index $app.Env (print "SERVER_TIMEOUT_" $portIndex) }}
listen {{ $app.EscapedId }}-cluster-{{ $portIndex }} :{{ $httpPort }}{{ if $healthCheckPath }}
        option httpchk GET {{ $healthCheckPath }}
        {{ end }}
        balance leastconn
        option forwardfor
        {{ if $keepAlive }}
        option http-server-close
        timeout http-keep-alive 3000
        cookie SERVERID insert indirect nocache
        {{ else }}
        option httpclose
        {{ end }}
        {{ if $serverTimeout }}timeout server {{ $serverTimeout }}{{ end }}
        {{ range $page, $task := $app.Tasks }}
        server {{ $app.EscapedId}}-{{ $task.Host }}-{{ index .Ports $portIndex }} {{ $task.Host }}:{{ index .Ports $portIndex }} {{ if $healthCheckPath }} check {{ end }} {{ if $keepAlive }} cookie {{ $app.EscapedId}}-{{ $task.Host }}-{{ index .Ports $portIndex }} {{ end }} {{ end }}
{{ else }}
{{ $healthCheckPath := $app.HealthCheckPath }}
{{ $keepAlive := index $app.Env (print "KEEP_ALIVE_PORT_" $portIndex) }}
{{ $serverTimeout := index $app.Env (print "SERVER_TIMEOUT_" $portIndex) }}
backend {{ $app.EscapedId }}-cluster-{{ $portIndex }}{{ if $healthCheckPath }}
        option httpchk GET {{ $healthCheckPath }}
        {{ end }}
        balance leastconn
        option forwardfor
        {{ if $keepAlive }}
        option http-server-close
        timeout http-keep-alive 3000
        cookie SERVERID insert indirect nocache
        {{ else }}
        option httpclose
        {{ end }}
        {{ if $serverTimeout }}timeout server {{ $serverTimeout }}{{ end }}
        {{ range $page, $task := $app.Tasks }}
        server {{ $app.EscapedId}}-{{ $task.Host }}-{{ index .Ports $portIndex }} {{ $task.Host }}:{{ index .Ports $portIndex }} {{ if $healthCheckPath }} check {{ end }} {{ if $keepAlive }} cookie {{ $app.EscapedId}}-{{ $task.Host }}-{{ index .Ports $portIndex }} {{ end }} {{ end }}       			
{{ end }}{{ end }}{{ end }}{{ end }}

